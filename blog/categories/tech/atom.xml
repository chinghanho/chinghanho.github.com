<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | @ChingHanHo]]></title>
  <link href="http://blog.chh.tw/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.chh.tw/"/>
  <updated>2017-01-02T23:22:21+08:00</updated>
  <id>http://blog.chh.tw/</id>
  <author>
    <name><![CDATA[Ching-Han Ho]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facebook Instant Articles「即時文章」是什麼？]]></title>
    <link href="http://blog.chh.tw/posts/fb-instant-articles/"/>
    <updated>2016-11-10T00:53:00+08:00</updated>
    <id>http://blog.chh.tw/posts/fb-instant-articles</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/QFqpxXZV3qUjUcR3LLrV3R5rcEPxvm-4DIP7Can_KyABedGdX9MEBFKYEasCx3VwVzoAZN9PqHmigIkyAkzMPswzcg1-BNiQxxPsKC3BhwWSG_ZboFlvygNePknmJAUlo-sCxAZMOwl8F1ZujQp-i_YxnvXEMJkSDqSYHNQESg7mCISjGUymV7KcQe-8hFh8jVhd7lHZkYWoeXwgJXjNPVYzzGcUkA26mnpSVo4yaQyf0aesuY-5-KIRxzb1WgCPUuhmsO5dTgTsTxU0zXBAX_XfldjuJ8AUx0SqOOPkzE9XKu6-Kw_rbTuoW07AeUAro_9Ly4sJgYf1yU3AF77W27uOtPWCQGf2eZypNES5NvyH8pgmvdZislP_hLzJ3vms8ffc3xqe1woCxDK69vfGyOQvQkgWP1o8C1a19sRaUncjhHVr_5AT17eqsRC8UHA_wB6o9XxXf26OOHlMQoQVJtAXMZNTvQY_ZSQvOqOwdETRCndDsWTy6Bm9dFp2ZWA19DdtVQkrwFMIQmvee58CVoH5d8cHe7JGOq-k3tm1P8U96PE9-XnqeJWPd_XyPQ_Z7oqQrDoloMXlHOovYlOwSvgcu44d8NaBhCMo0UopW5mUcEYWYA=w1280" alt="速度" /></p>

<p>行動裝置時代瓶頸：</p>

<ul>
<li>手機頻寬小；</li>
<li>手機速度慢；</li>
</ul>


<p>但是人們希望：</p>

<ul>
<li>速度快；</li>
<li>速度要快；</li>
<li>速度更快；</li>
</ul>


<p>快有什麼好處？遠古的網路傳說：</p>

<ul>
<li>Amazon 網頁平均載入時間多 1 秒，公司年度營收少 16 億美元；</li>
<li>Google 網頁平均載入時間多 0.4 秒，每天搜尋次數減少 800 萬；</li>
<li>使用者開啟網頁 4 秒內沒有出現任何內容便會放棄；</li>
</ul>


<p>所以 Facebook 推出「<a href="https://developers.facebook.com/docs/instant-articles">即時文章</a>」，讓文章內容可以在毫秒之間顯示。</p>

<!-- more -->


<h3>技術</h3>

<p>即時文章原理：</p>

<ul>
<li>簡單說，他們預先把內容載入到 FB app 裡，讓使用者可以「不離開 FB app」直接讀取內容，省去網路訊號來往半個地球的時間；</li>
<li>僅支援 iOS and Android，需要 iPhone iOS 7.0+ &amp; FB app 30.0+，以及 Android Jelly Bean+ &amp; FB app 57+。</li>
</ul>


<p>我想要我的網站內容可以有即時文章，有什麼條件？</p>

<ul>
<li>得要先有個網站；</li>
<li>遵守 FB <a href="https://developers.facebook.com/docs/instant-articles/policy">文章政策</a>；</li>
<li>遵守 FB <a href="https://developers.facebook.com/docs/instant-articles/design/overview#design-guidelines">設計規範</a>；</li>
<li>網站內容頁面程式結構要為「即時文章」做準備；</li>
<li>提交申請，至少準備 10 篇文章做「<a href="https://developers.facebook.com/docs/instant-articles/get-started/article-review">文章審查</a>」。</li>
</ul>


<p>「即時文章」要怎麼做？有以下幾種方式：</p>

<ul>
<li>RSS：網站要另外製作 RSS feed 的端口方便給 FB 抓資料，文件參考「<a href="https://developers.facebook.com/docs/instant-articles/publishing/setup-rss-feed">透過 RSS 摘要發佈</a>」。</li>
<li>API：網站內容頁面的結構需要特別設計過，符合 HTML5 語義話結構；然後網站的內容在 CRUD（建立、讀取、更新、刪除）每個動作，都要與 FB 的程式溝通一次。文件參考「<a href="https://developers.facebook.com/docs/instant-articles/api">即時文章 API</a>」。</li>
<li>另外還有 SDK 跟 WordPress 套件，前者要用 PHP 不討論，後者要用 WordPress 架站。</li>
</ul>


<p>實作了以上功能之後，要先提交 10 篇文章給 FB 進行「文章審查」，在那之前無法發佈即時文章。</p>

<p>一旦完成設定以及審查過程後，FB app 上有 Instant Articles 的內容會出現一個閃點符號，點了<a href="https://twitter.com/mattjroper/status/598489543478751232">幾乎可以毫秒級出現內容</a>。</p>

<h3>商業</h3>

<p>內容都跑到 FB 上去顯示了，我的網站流量豈不是沒了？</p>

<ul>
<li>對，因為讀者「不離開 FB app」；</li>
<li>可以用 <a href="http://www.comscore.com/">comScore</a>、<a href="https://www.google.com.tw/intl/zh-TW/analytics/">Google Analytics</a>、<a href="https://my.omniture.com/login/">Omniture</a> 或 Facebook 自己的工具追蹤「即時文章」的流量；</li>
<li>因為網站本身流量減少，所以原本網站上的廣告收益減少；</li>
<li>但是可以在即時文章放廣告，詳細見「<a href="https://developers.facebook.com/docs/instant-articles/monetization">即時文章的獲利方式</a>」。</li>
</ul>


<p>我的內容在 FB app 上出現得好快好爽，都沒有副作用？FB 轉型做慈善事業？</p>

<p>簡單說，這是 FB 繼吃掉通訊平台、電商平台、支付平台的夢之後，另一個吃掉出版平台的夢。</p>

<p>首先，FB 為內容產出者提供非常好的平台，為許多媒體帶來非常大的流量、讀者和廣告收益等，但這有點像嗑藥，FB 是個一但染上很難戒除的癮，因為：</p>

<ul>
<li>開始需要繳交「演算法維護費」跟「保護費」來維持流量；</li>
<li>Facebook 網站如果掛了就無法導流；</li>
<li>Facebook 有自己的一套「內容審查」決定權在他們，例如粉絲團被關閉的案例；</li>
</ul>


<p>尤其當「即時文章」是要媒體把內容「直接顯示在 FB 上」，讀者連媒體自家網站都不用過去了，對於媒體來說，對自家網站的控制權變得更弱了。</p>

<p>所以，話說回來，我的網站適合「即時文章」嗎？ 以下是個思路：</p>

<ul>
<li>問問為什麼當初選擇花錢自架網站？為什麼不去用免費的 BSP？</li>
<li>如果答案是說自己架網站可以對網站樣式、內容有更多的客製化跟掌控權……</li>
<li>……</li>
<li>……</li>
<li>……</li>
<li>……</li>
<li>那用「即時文章」等於放棄以上這些，那怎麼不去用 BSP？</li>
</ul>


<p>報告完畢！👾</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[io.js 是什麼？Node.js 社群分裂事件觀察]]></title>
    <link href="http://blog.chh.tw/posts/what-is-iojs-nodejs-forking/"/>
    <updated>2014-12-07T04:29:00+08:00</updated>
    <id>http://blog.chh.tw/posts/what-is-iojs-nodejs-forking</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-mDHp26oTCxg/VINpfJZV2ZI/AAAAAAAAIJk/FlmyYl4aRBY/w770-h333-no/Screen%2BShot%2B2014-12-07%2Bat%2B4.38.35%2BAM.png" alt="" /></p>

<p>這個事件已經燒了好幾天，剛開始注意到是 Hacker News 上出現「<a href="https://news.ycombinator.com/item?id=8669557">IO.js – Evented I/O for V8 javascript</a>」這篇推文，我甚至還不曉得到底該寫 IO.js 還是 io.js 比較正確。</p>

<p>整件事情發展詭譎得像 <a href="http://www.imdb.com/title/tt1446714/">Prometheus</a> 的 Elisabeth Shaw 剛發現黑色黏液一樣，不知道到底是希望還是崩壞的開始。最近公司有要用 Node.js 所以我就追了一下新聞，大概統整出來的概況寫了這篇觀察紀錄，或許有些可能有錯麻煩在幫我指正，感謝喔！</p>

<!-- more -->


<h3>故事的序章</h3>

<p>希臘傳說中的巨人族自殺喝下奇怪的黑色黏液來開創人類世界，Node.js 的創建者 <a href="https://github.com/ry">ry</a>（Ryan Dahl） 確實也有點像上帝創世後神龍見首不見尾地消失無蹤，怎麼有種 <a href="http://www.smashingmagazine.com/2010/05/15/why-a-tale-of-a-post-modern-genius/">_why</a> 風格的感覺……都回到真實世界去了嗎（<a href="http://www.imdb.com/title/tt0133093/">The Matrix</a> 梗）？</p>

<p>在 ry <a href="https://groups.google.com/forum/#!topic/nodejs/hfajgpvGTLY">消失</a>之前他把 Node.js 版權賣給了 <a href="https://www.joyent.com/">Joyent</a> 還替他們工作了一陣子，但稍微有點信仰的 developer 都不會喜歡參與的 Open Source 專案跟商業公司扯上關係，這次 io.js 事件主導人之一的 <a href="https://github.com/mikeal">mikeal</a>（Mikeal Rogers）就寫了一篇「<a href="https://medium.com/@mikeal/on-corporate-ownership-of-open-source-786ebd15847e">On Corporate Ownership of Open Source</a>」說出他的想法。</p>

<p>Node.js 有另外兩個非常重要的 core commiter 分別是 <a href="https://github.com/piscisaureus">piscisaureus</a>（Bert Belder）和 <a href="https://github.com/bnoordhuis">bnoordhuis</a>（Ben Noordhuis），他們成立的公司 <a href="http://strongloop.com/">StrongLoop</a> 想要搶奪 Node.js 社群統治權的野心非常強，是 Joyent 最大的兢爭對手，但無奈商標權就是 Joyent 的，StrongLoop 也不能拿他們怎麼辦。</p>

<p>StrongLoop 你就直說吧！你就是想要取代 Joyent 來主導 Node.js 的發展！XD</p>

<h3>分裂的跡象</h3>

<p>Open Source 這回事嘛……就是授權範圍允許，當然可以 fork 一份出去改成自己想要的版本，只是看整個社群願不願意支持而已。我不是很了解 Node.js 核心的開發上，Joyent 是用什麼樣的風格來管理，但顯然有很多 core commiter 不太滿意，從很久之前就出現了分裂的聲音。</p>

<p>Joyent 做為 Node.js 所有者、掌門人也聞到了這個味道，當然不會坐視這種情況不管，因此成立了所謂的 <a href="http://nodejs.org/about/advisory-board/">Advisory Board</a>，目的就是在於廣納所有 Node.js developer 的意見跟想法。</p>

<p>呃，傾聽人民的聲音？但似乎此舉在某些人眼裡看起來就是獨裁者的作秀，實質上沒什麼幫助，所以熱血革命鬥士開始組織 <a href="http://nodeforward.org/">Node Forward</a> 來討論該怎麼「推翻」政府，最後有了今日的 <a href="https://github.com/iojs/io.js/">io.js</a>。</p>

<p>說說看在這之間難道 StrongLoop 的人難道不會煽風點火嗎？:p</p>

<p>Update 2015.01.14：今天 io.js 發佈 1.0.0 版本把整個 Twitter 洗版洗得一塌糊塗，然後我也看到另外一個軼聞，就是 Ben Noordhuis 被當初被 Joyent「驅逐」的原因竟然是因為<a href="https://github.com/joyent/libuv/commit/804d40ee14dc0f82c482dcc8d1c41c14333fcb48">性別歧視用字</a>的問題，也可以<a href="https://github.com/joyent/libuv/pull/1015#issuecomment-29568172">在這裏</a>找到他本人的說法。另一層考量就是 Ben 為 Joyent 競爭對手工作，很難不讓人聯想這是一起政治事件。</p>

<h3>io.js 是什麼？</h3>

<p>io.js 目前在 Github 上的專案位置：<a href="https://github.com/iojs/io.js">https://github.com/iojs/io.js</a></p>

<p>它的前身是 <a href="https://github.com/node-forward/">node-forward</a>/node，也就是 Node Forward 用來抵抗 Joyent 的專案，另一個 Node.js fork 版本，在正式 public release 前醞釀了大概 4 個禮拜左右。</p>

<p>io.js 目的是希望可以讓 Node.js 更加擁抱社群、更自由、更公開、更透明……之類的，而不是被 Joyent「跋扈的專制統治」，其實我也不曉得真實狀況是怎樣。總之，目前的核心成員有原本 Node.js 的重要貢獻者：</p>

<ul>
<li>Fedor Indutny（@indutny）</li>
<li>Trevor Norris（@trevnorris）</li>
<li>Ben Noordhuis（@bnoordhuis）</li>
<li>Isaac Z. Schlueter（@isaacs）</li>
<li>Nathan Rajlich（@TooTallNate）</li>
<li>Bert Belder（@piscisaureus）</li>
</ul>


<p>也有邀請 Advisory Board 大家長 TJ Fontaine（@tjfontaine）但是被婉拒了，劇情超像 <a href="http://www.imdb.com/title/tt3110960/">Jimmy's Hall</a> 的神父啊！lol</p>

<h3>賤人就是矯情</h3>

<p>StrongLoop 在 io.js 公諸於世之後發表了「<a href="http://strongloop.com/strongblog/position-on-io-js/">StrongLoop’s Position on io.js</a>」文章，來表示「其實我們還是愛著 Node.js 啦！但如果……」，彷彿是在向 Joyent 下達最後通牒，不好好處理我們就分手吧！</p>

<p>分裂其實對於整個 Node.js 生態系來說絕對是有害無益，但 StrongLoop 的態度就是師馬昭之心。看吧！文末還不忘歌功頌德一下他們自己。</p>

<p>最近常在他們公司網站上看到自我宣傳的文宣，尤其是這次 v0.12 版本當中有很大比例的程式碼是由 StrongLoop 的人 commit 的，那是因為 v0.12 可以視為 v1.0 版本的候選版本，這也意味著在告訴大家 Node.js v1.0 正式版最強力的推動者是我們 StrongLoop 啊！</p>

<p>其實這也沒什麼不好，而且 io.js 給的方向確實就是現在 Node.js 需要處理以及解決的問題，純粹是一種給人的觀感差異罷了。:p</p>

<h3>小結</h3>

<p>「這是個政治問題，需要政治的智慧來解決」，已經無關乎技術。</p>

<p>整個事件對於 Node.js 還是有點影響的，那就是 Joyent 終於<a href="http://blog.nodejs.org/2014/12/03/advisory-board-update/">發佈消息</a>說 v0.12 即將到來，可能也意味著 v1.0 正式版本要隨之釋出，不過……我想這已經無法阻止 io.js 那群人繼續 forking，接下來會如何繼續拭目以待吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每個人都應該有一套自己的密碼演算法]]></title>
    <link href="http://blog.chh.tw/posts/my-password-algorithm/"/>
    <updated>2013-06-29T16:06:00+08:00</updated>
    <id>http://blog.chh.tw/posts/my-password-algorithm</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-XJ2BlPNnueY/Uc7GM1tq0bI/AAAAAAAAGgM/EDQev1B22wU/s690/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-06-29%2520%25E4%25B8%258B%25E5%258D%25887.32.00.png" alt="the-matrix" /></p>

<p>最近有位朋友的 Facebook 帳號第二次被盜，然後一堆人被他加進一些討厭又奇怪的團購社團，那位朋友也是尷尬又無奈，所以我就教他一些我設定密碼的「演算法」，聊天內容很多，我就順便整理到部落格來分享，希望對其他人有用。</p>

<p>在設定密碼前應該要有個基本認識，就是這個密碼可能對於你媽而言是保密的，但是在<del>室友</del>駭客面前、或是網站管理員面前，它是透明毫無隱藏的，所以在這前提下就不應該把每個網站全部設同個密碼，因為駭客可以拿這套帳號密碼去登入其他網站。</p>

<h2>密碼演算法</h2>

<p>但是每個網站密碼都不一樣怎麼記得住？所以需要一套「演算法」，以後只需要記憶這套算法，而不是去記密碼。「演算法」聽起來好像很神奇，其實只是一套組合的方法，隨便舉例：</p>

<blockquote><p>網站分級變數 + 常數 + 網站辨識代號 = 密碼</p></blockquote>

<p>以下來分別說明這些東西是什麼。</p>

<!-- more -->


<h3>網站分級變數</h3>

<p>網站分級是指依照網站的重要性分類，並且替每個級別設定不同的密碼。最核心的網站通常是信箱服務，例如 Google、Yahoo，你應該替他們設定一個獨立的密碼，與那些亂七八糟的小網站區隔開來。</p>

<p>那應該拿什麼來當變數？我的建議是，你可以選你最愛顏色的 16 進位色碼（如果你偏愛 HSL 也行…… :p），或是圓周率小數點後的第 108 位數到 116 位數（前提是你得背起來 XDD），又或者是一句名言每個字的開頭第一個字母，例如「<em>Why join the navy if you can be a pirate</em>」變成「<em>Wjtniycbap</em>」。</p>

<p>將網站依照重要性分成三種等級，並且每種等級分配一種變數：</p>

<ul>
<li>核心（Google...）：<em>Wjtniycbap</em></li>
<li>次等（Evernote...）：<em>bion</em></li>
<li>下等（亂七八糟論壇...）：<em>wwantm</em></li>
</ul>


<p>太多不好記？寫下來也沒關係，反正別人猜不到你的算法，給他看也沒關係，只要別在紙上寫「這是密碼」就好了。不過，用不著分類太多，三種級別其實也不難記。</p>

<h3>常數</h3>

<p>這是一組夾雜在密碼裡不會改變的常數，主要目的是增加密碼整體的複雜度。最好是數字跟英文的混合，甚至大小寫混合都可以。綜合上一個變數，現在密碼變成了：</p>

<ul>
<li>核心（Google...）：<em>Wjtniycbap</em> + <em>0rz</em></li>
<li>次等（Evernote...）：<em>bion</em> + <em>0rz</em></li>
<li>下等（亂七八糟論壇...）：<em>wwantm</em> + <em>0rz</em></li>
</ul>


<h3>網站辨識代號</h3>

<p>這是這個網站的獨有特徵，可以是這個網站 domain 名稱的變體，例如 Google 的偶數字母：oge；或是該字母在 26 個字母當中的索引位置，o 是第 15 個字母、g 是第 7 個、e 是第 5 個，合起來就是 1575。</p>

<p>最後，我們的密碼就變成了這樣：</p>

<ul>
<li>核心（Google...）：<em>Wjtniycbap0rz</em> + <em>oge</em></li>
<li>次等（Evernote...）：<em>bion0rz</em> + <em>vro</em></li>
<li>下等（亂七八糟論壇...）：<em>wwantm0rz</em> + <em>xxx</em></li>
</ul>


<p>這樣就能產生每個網站都不一樣的密碼，而且不同級別的網站也不會彼此影響到。密碼不是背起來的，而是推理出來的。很酷！也很宅，對吧？</p>

<h3>還有些事情必須知道</h3>

<ul>
<li>正妹說會經常換密碼的男人最性感，你可以定期更改「網站分級變數」這個部分，或是修改整套算法。</li>
<li>網站分級不是依你常去的網站來劃分（我知道你常去那種網站，但你也要知道那種網站一定會偷你的密碼），而是這個網站不可被攻破的重要性來區別。</li>
<li>越重要的核心服務建議啟用多一點的認證機制，例如 Google、Facebook 都有提供手機簡訊的登入認證機制，請一定要啟用它。</li>
<li>可以變化的不是只有密碼，不同網站當然也可以使用不同的帳號。如果有些網站是「只使用一次」性質的網站，可以多多利用 <a href="http://10minutemail.com/">10 Minute Mail</a> 這個服務。</li>
<li>依賴算法其實也有些缺點，例如網路銀行的密碼通常會硬性規定要 8 個字元，迫使我必須要另外想一個特例的密碼給網路銀行，下場就是我從來記不住我網路銀行的密碼是什麼。:p</li>
</ul>


<h2>關於密碼管理工具</h2>

<p>儘管現在很多人喜歡用 <a href="http://keepass.info/">KeePass</a> 和 <a href="http://lastpass.com/">LastPass</a> 這類的軟體，但我始終不是很信任這類軟體，也不喜歡用。況且……人類發明了機器，並且替機器上了鎖，卻又用了另外一台機器來管理這把鎖，然後又替這台機器上了另外一把鎖，還真是有趣？要是這把鎖掉了，那就真的全面失控了啊！</p>

<p>再說……連<a href="http://youtu.be/VRCUpXLguHM?t=36m6s">駭客都說不敢用</a>了，你敢用嗎？XDD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X 與 Windows 切換應用程式的介面體驗]]></title>
    <link href="http://blog.chh.tw/posts/osx-windows-switch-applications-ux/"/>
    <updated>2013-06-10T15:39:00+08:00</updated>
    <id>http://blog.chh.tw/posts/osx-windows-switch-applications-ux</id>
    <content type="html"><![CDATA[<p>用了好一陣子 OS X 回頭去用 Windows，發現有好多不習慣，除了主要的功能鍵 <kbd>Ctrl</kbd> 跑到鍵盤邊緣去了（OS X 主要功能鍵 <kbd>Command</kbd> 就在空白鍵旁邊比較近），手指頭常常按錯之外，最近在整理硬碟資料夾的時候又被一個小小的切換視窗功能給煩到。</p>

<p>常用電腦的人一定都很熟悉 Ctrl + Tab 這個功能，可以快速在不同視窗之間切換，可是在 Windows 下當我使用這個功能時，給我的介面是這樣的：</p>

<p><img src="https://lh5.googleusercontent.com/-izHKKLQ5a8Q/UbWDPvs5uiI/AAAAAAAAGY4/FiR5NnVj9Ys/s592/switch-windows.png" alt="windows-switching-windows" /></p>

<p>主要是一個視窗縮圖，和一個小小的應用程式 icon 塞在右下角，辨識度非常地差，我很難一眼就快速認出哪個視窗是我要切換的應用程式。再來看看 OS X 切換視窗的介面：</p>

<!-- more -->


<p><img src="https://lh3.googleusercontent.com/-DDB7DNKyzHU/UbWDQdjQICI/AAAAAAAAGZM/uPy8c1vtHug/s690/osx-switch-apps.png" alt="osx-switching-windows" /></p>

<p>清楚的應用程式 icon 辨別度非常的強，我一眼就能看出哪個應用程式是我想要切換過去的。這裡也能說明一個應用程式的 icon 設計也是很重要，不需要特別的華麗只需要留下足夠的印象，讓人很容易辨識。</p>

<p>順便分享一下我的 Chrome 常用書籤長這樣，也是靠清楚的 icon 來做為辨識：</p>

<p><img src="https://lh6.googleusercontent.com/-lsfa98IeCCA/UbWLW0EBq8I/AAAAAAAAGZ4/foancUbzS2M/s690/chrome-bookmarks.jpg" alt="chrome-bookmarks" /></p>

<p>但是我在整理 Windows 那台電腦硬碟時，遇到最惱人的狀況其實是這個，同一個應用程式都是長得差不多的縮圖：</p>

<p><img src="https://lh6.googleusercontent.com/-7iT_R82qZL4/UbWDPgCeZ7I/AAAAAAAAGZE/NT9pARWEpBU/s690/switch-windows-2.png" alt="windows-switching-windows-2" /></p>

<p>這樣我完全不知道到底該切到哪一個視窗，而 Windows 下好像也沒有類似 <kbd>Command</kbd> + <kbd>`</kbd> 的功能。如果是 OS X 下，還可以用 Mission Control 或是 Expose 等方式，方便地在不同視窗之間做選擇，這部份 Windows 的介面體驗就做得讓人很難受。</p>

<p>好在我現在只是要整理資料夾，以前我有玩過不少檔案總管的視窗管理軟體，可是介面都做得很宅（不友善）。OS X 上我現在用的是 <a href="http://www.trankynam.com/xtrafinder/">XtraFinder</a> 這套模擬 Chrome 的標籤介面，看起來相當簡潔，外觀長這樣：</p>

<p><img src="https://lh5.googleusercontent.com/-7IbTgHfR58s/UbWGHC3jXwI/AAAAAAAAGZc/RbgfKBfGgGM/s690/osx-xfinder.png" alt="osx-xfinder" /></p>

<p>所以我也想要在 Windows 上，找一個相似風格的視窗管理軟體，後來找到了 <a href="http://cn.ejie.me/">Clover 3</a> 用起來還不錯，還有類似書籤的功能，可惜我覺得有點雞肋就是了，外觀長這樣：</p>

<p><img src="https://lh6.googleusercontent.com/-K5h38CcBicI/UbWDPuGCQsI/AAAAAAAAGZA/8MybmGE3WCM/s690/cover-3.PNG" alt="windows-cover-3" /></p>

<p>題外話，我現在已經漸漸不太用 <kbd>Command</kbd> + <kbd>Tab</kbd> 的方式切換應用程式，而是改用 <a href="http://www.alfredapp.com/">Alfred</a> 這套軟體直接輸入應用程式名稱關鍵字來切換，因為有時候程式開得太多，一直 <kbd>Tab</kbd>、<kbd>Tab</kbd>、<kbd>Tab</kbd> 也是很煩的。XD</p>

<p>過幾天，有空來寫一篇介紹一些 mouseless 操作電腦的方法好了。:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google 搜尋加密有兩種]]></title>
    <link href="http://blog.chh.tw/posts/https-www-google-com-vs-https-encrypted-google-com/"/>
    <updated>2013-03-22T13:53:00+08:00</updated>
    <id>http://blog.chh.tw/posts/https-www-google-com-vs-https-encrypted-google-com</id>
    <content type="html"><![CDATA[<p>剛剛看 <a href="http://www.businessinsider.com/google-products-youve-never-heard-of-2013-3#encryptedgooglecom-is-a-more-secure-way-to-search-for-things-encrypted-uses-secure-sockets-layer-ssl-which-is-the-same-security-that-banks-use-online-11">Business Insider</a> 提到了 Google 的 <a href="https://encrypted.google.com/">encrypted.google.com</a> 這個網址，記得在 Google 還沒有對已登入用戶全面預設用 <a href="http://en.wikipedia.org/wiki/HTTP_Secure">HTTPS</a> 連線以前，<em>encrypted.google.com</em> 是專門用來使用 HTTPS 的網址，也就是當連線到 <em>https://www.google.com</em> 時會被自動跳轉到 <em>https://encrypted.google.com</em>。</p>

<p>既然現在 Google 對於已登入的用戶已經預設用 HTTPS 連線，那這個東西還留著幹嘛？所以<a href="http://security.stackexchange.com/questions/32367/what-is-the-difference-between-https-google-com-and-https-encrypted-google-c">問一下 Google 找答案</a>，原來 <em>encrypted.google.com</em> 另有其他特異功能，兩者之間的差異，主要在於點擊廣告與搜尋結果時，處理 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%8F%82%E7%85%A7%E4%BD%8D%E5%9D%80">HTTP 參照位址</a>的方式不同。</p>

<!-- more -->


<h3>點擊一個廣告</h3>

<ul>
<li><p><em>https://www.google.com</em>：Google 將會把你帶到一個 HTTP 的重新導向頁面，在那裡他們會把你的搜尋字串塞進參照資訊裡去。</p></li>
<li><p><em>https://encrypted.google.com</em>：如果這個廣告主用的是 HTTP，Google 不會讓他們知道你的查詢字串是什麼。而如果廣告主用的是 HTTPS，他們將會如常地收集到你的參照資訊（包括查詢字串）。</p></li>
</ul>


<h3>點擊一般的搜尋結果</h3>

<ul>
<li><p><em>https://google.com</em>：除果網站使用 HTTP 連線，Google 將會把你帶到 HTTP 的重新導向頁面，但是不會把你的搜尋字串給塞進參照資訊裡面。他們只會告訴網站你是從 Google 來的。如果你的網站使用 HTTPS 連線，便可以正常地搜集到參照資訊。</p></li>
<li><p><em>https://encrypted.google.com</em>：如果你點擊的網站使用 HTTP 連線，Google 既不會告訴它查詢字串是什麼，也不會告訴它你是哪裡來的。如果該網站使用 HTTPS 連線，它則會正常地收到參照資訊。</p></li>
</ul>


<p>所以我的 blog 從搜尋引擎來的訪客中，用關鍵字去查有 74% 都是「not provided」大概就是這個原因。如果這篇答案的結果是正確的，採用 HTTPS 連線加密的網站便可以正確地搜集到帶有查詢字串的參照資料，那網站採用 HTTPS 將會變成最基本的條件。</p>
]]></content>
  </entry>
  
</feed>
